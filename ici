#!/bin/sh

# Copyright (C) 2012-2014 Simon Josefsson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Most of the structure of this package was borrowed from 
# https://gitorious.org/cosmos/ so I kept the copyright

set -e
self=`basename $0`

ICI_PRG=$0
export ICI_PRG
ICI_VERSION=1.9

usage ()
{
    echo "\
Usage: ici [OPTION...] CA COMMAND [COMMAND-OPTION...]
   or: ici help [COMMAND]

ici is a stupidly simple certificate authority.

In the first form, ici performs COMMAND on the certificate authority
structure named CA.

In the second form, ici provides help for COMMAND if one is given,
otherwise it produces the same output as 'ici --help'

Before doing anything else, you will need to initialise your
certificate authority, possibly generate a token, and create a
root certificate.  See 'ici help init', 'ici help gentoken' and
'ici help root' for more information.

Options:
Mandatory arguments to long options are mandatory for short options too.

  -v, --verbose             explain what is being done
  -h, --help                show this help text and exit
  -V, --version             show version information and exit
  -l, --list-cmds           list available commands

Environment:
  ICI_CONF_DIR  can be used to specify a directory where the configuration
                file ici.conf is found.  This file is sourced before the
                command line parameters are parsed.
                Default directory is /etc/ici.
  ICI_CA_ROOT   can be used to specify the root directory under which the
                certificate authority structures are stored.  This is
                overriden by ICI_CA_ROOT in ${ICI_CONF_DIR}/ici.conf if
                that file exists and defines that variable.
                Default directory is /var/lib/ici.

" 1>&2
}

version ()
{
    echo "\
ici ${ICI_VERSION}

Copyright (C) 2012-2014 Simon Josefsson & Leif Johansson.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Simon Josefsson (overall structure) and Leif Johansson.
" >&2
}

listcmds ()
{
    for cmd in `ls -d "${ICI_LIB_DIR}"/*.d | sed -e 's|.*/||g' -e 's|\.d$||'`; do
	descfile="${ICI_LIB_DIR}/$cmd.d/desc"
	if [ -f "$descfile" ]; then desc=`head -1 "$descfile"`; fi
	if [ -n "$desc" ]; then
	    # Avoid having commands longer than 10 characters
	    cmd=`echo "$cmd          " | cut -c-10`
	    echo "$cmd - $desc" >&2
	else
	    echo "$cmd" >&2
	fi
    done
}

ICI_OPENSSL=openssl
export ICI_OPENSSL
ICI_PKCS11_TOOL=pkcs11-tool
export ICI_PKCS11_TOOL

# Read configuration file.
{
    if test -z "${ICI_CONF_DIR}"; then
        ICI_CONF_DIR="/etc/ici"
    fi
    ICI_CONF="${ICI_CONF_DIR}/ici.conf"
    export ICI_CONF_DIR ICI_LIB_DIR ICI_CONF

    # Protect the global configuration variables, as there's no reason
    # ici.conf should change them.
    __save_ICD="$ICI_CONF_DIR"
    __save_IC="$ICI_CONF"
    if test -e "$ICI_CONF"; then
	set -a
	. "$ICI_CONF"
	set +a
    fi
    if [ "$__save_ICD" != "$ICI_CONF_DIR" ]; then
	echo "*** Warning: ICI_CONF_DIR was changed by $__save_IC...  ignored" >&2
    fi
    if [ "$__save_IC" != "$ICI_CONF" ]; then
	echo "*** Warning: ICI_CONF was changed by $__save_IC...  ignored" >&2
    fi
    ICI_CONF_DIR="$__save_ICD"
    ICI_CONF="$__save_IC"

    if test -z "${ICI_CA_ROOT}"; then
        ICI_CA_ROOT="/var/lib/ici"
    fi
}

# Command line parsing.
{
    while test $# -gt 0; do
	case "$1" in
	    --verbose | -v)
		ICI_VERBOSE=y
		shift ;;
	    --help | -h )
		usage
		exit 0 ;;
	    --version | -V )
		version
		exit 0 ;;
	    --list-cmds | -l )
		listcmds
		exit 0 ;;
	    --debug | -d )
		ICI_DEBUG=y
		shift ;;
	    -- )
        # Stop option processing
		shift
		break ;;
	    -* )
		echo "$self: unknown option $1" 1>&2
		echo "Try 'ici --help' for more information." 1>&2
		exit 1 ;;
	    * )
		break ;;
	esac
    done

    export ICI_VERBOSE ICI_DEBUG
}

test $# -ne 0 -a "$1" != "help" && { ca="$1";  shift; }
test $# -ne 0                   && { cmd="$1"; shift; }

if [ "$cmd" != "help" -a -z "$ca" ]; then
    echo "$self: no certificate authority name given" >&2
    echo "Try 'ici help' for more information." >&2
    exit 1
fi

if [ -z "$cmd" ]; then
    echo "$self: no subcommand given" >&2
    echo "Try 'ici help' for more information." >&2
    exit 1
fi

dir="${ICI_LIB_DIR}/$cmd.d"

if ! test -d "$dir"; then
    echo "$self: unknown command '$cmd'" 1>&2
    echo "Try 'ici help' for more information." 1>&2
    exit 1
fi

_trap ()
{
   err=$?
   if [ $err -ne 0 -a "$1" = "y" ]; then
      if [ -s "$2" ]; then
	  echo "--- cfg ---"
	  cat $2
      fi
      if [ -s "$3" ]; then
	  echo "--- out ---"
	  cat $3
      fi
   fi
   unlink $2
   unlink $3
   exit $err
}

cfg=`mktemp`
log=`mktemp`
trap '_trap "$ICI_DEBUG" $cfg $log' EXIT

parts=$(echo `find $dir/ -mindepth 1 -maxdepth 1 \
    \( -type f -o -type l \) -executable -name '[0-9]*' \! -name \*~ | sort`)

if test -z "$parts"; then
    echo "$self: nothing to do?!" 1>&2
    exit 1
fi

ICI_CA=""
ICI_CA_DIR=""
if [ "$cmd" != "help" ]; then
    ICI_CA="$ca"
    ICI_CA_DIR="${ICI_CA_ROOT}/$ICI_CA"
fi

ICI_CONFIG="$cfg"
ICI_CMD="$cmd"

export ICI_CA ICI_CA_DIR ICI_CONFIG ICI_CMD

. $ICI_LIB_DIR/lib/config.sh
if [ -n "$ICI_CA" -a -f $ICI_CA_DIR/ca.config ]; then
   . $ICI_CA_DIR/ca.config
fi
. $ICI_LIB_DIR/lib/args.sh

for part in $parts; do
    "$part" "$@"
done

exit 0
